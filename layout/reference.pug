mixin normalrow(schema, name, type, requiredList)
  - var required = requiredList.indexOf(name) !== -1
  td.shortfield
    span(class=required ? 'required' : '')= name
  td.shortfield.lighter
    -
      var limits = null;
      var min = schema.minLength || schema.minItems || schema.minimum;
      var max = schema.maxLength || schema.maxItems || schema.maximum;
      if (min || max) {
        limits = `[${min || 0}:${max || '∞'}]`;
      }
    | #{type || schema.type}#{limits}
    if schema.default
      br
      span.small default: #{schema.default}
  td.shortfield
    if schema.pattern
      code.short.schema-pattern= schema.pattern
    else if schema.format
      span(class=schema.format)= schema.format
    else if schema.enum
      ul.enum
        each val in schema.enum
          li
            code.short.schema-pattern= val
  td.normaltext !{marked(schema.description || '')}

mixin combination(schema, name, subs, sort)
  tr.frow
    +normalrow(schema, name, sort, [])
  tr.srow
    td.indent(colspan=4)
      table.table.table-condensed
        each sub in subs
          - sub.type = sub.type || schema.type
          - sub.format = sub.format || schema.format
          case schema.type
            when "object"
              tr.frow
                +normalrow(sub, name, 'Object of', [])
              tr.srow
                td.indent(colspan=4)
                  table.table.table-condensed
                    +schemarow(sub, sub.title, [])
            default
              tr
                +normalrow(sub, sub.title, sub.type, [])

mixin schemarow(schema, name, requiredList)
  - requiredList = schema.required || requiredList || []
  - schema.description = schema.description || schema.title
  case schema.type
    when "array"
      tr.frow
        +normalrow(schema, name, 'Array of', requiredList)
      tr.srow
        td.indent(colspan=4)
          table.table.table-condensed
            +schemarow(schema.items, schema.items.title, requiredList)
    when "object"
      if schema.properties
        each prop, name in schema.properties
          if prop.type && prop.type === "object"
            tr.frow
              +normalrow(prop, name, 'Object of', requiredList)
            tr.srow
              td.indent(colspan=4)
                table.table.table-condensed
                  +schemarow(prop, name, requiredList)
          else
            +schemarow(prop, name, requiredList)
        if schema.additionalProperties
          tr
            td(colspan=4)
              Additional properties are permitted...
      else if schema.additionalProperties
        +schemarow(schema.additionalProperties, '<string>', requiredList)
      else if schema.anyOf
        +combination(schema, schema.title, schema.anyOf, 'Any of')
      else if schema.allOf
        +combination(schema, schema.title, schema.allOf, 'All of')
      else if schema.oneOf
        +combination(schema, schema.title, schema.oneOf, 'One of')
      else
        tr
          td(colspan=4) Anything ¯\_(ツ)_/¯
    default
      if schema.anyOf
        +combination(schema, name, schema.anyOf, 'Any of')
      else if schema.allOf
        +combination(schema, name, schema.allOf, 'All of')
      else if schema.oneOf
        +combination(schema, name, schema.oneOf, 'One of')
      else
        tr.frow
          +normalrow(schema, name, null, requiredList)

mixin schemabox(schema)
  .schemabox.panel.panel-default
    .panel-heading
      if schema.title
        h4.no-anchor
          | #{schema.title}
          if schema.id
            | 
            small
              a(href=schema.id, target='_blank', rel='noopener noreferrer')
                | (source)
        | !{marked(schema.description || '')}
    table.table
      +schemarow(schema)

mixin scopeBox(scopes)
  if typeof scopes === 'string'
    span.scope-itself.bg-success !{scopes.replace(/[<]/g, '&lt;').replace(/[>]/g, '&gt;')}
  if scopes.if && scopes.then
    span.boxtop if&nbsp; <strong>#{scopes.if}</strong>
    .sub-scope-box
      +scopeBox(scopes.then)
    if scopes.else
      span.boxtop else
      .sub-scope-box
        +scopeBox(scopes.else)
  else if scopes.for && scopes.each && scopes.in
    span.boxtop for each&nbsp; <strong>#{scopes.for}</strong>
    span.boxtop &nbsp;in&nbsp; <strong>#{scopes.in}</strong>
    .sub-scope-box
      +scopeBox(scopes.each)
  else if scopes.AllOf || scopes.AnyOf
    - var operator = Object.keys(scopes)[0]
    span.boxtop= scopes.AllOf ? 'all of' : 'any of'
    .sub-scope-box
      each scope, index in scopes[operator]
        +scopeBox(scope)
        if index < scopes[operator].length - 1
          span.small= scopes.AllOf ? ' and' : ' or'
          <br />

style.
  .sub-scope-box {
    border-left: 1px solid #888;
    padding: 2px 10px;
  }

  .boxtop {
    background-color: #888;
    border-bottom: 1px solid #888;
    color: #fff;
    padding: 1px 3px;
  }

  .boxtop:hover {
      background-color: #555;
      border-bottom: 1px solid #555;
  }
  .boxtop:hover + .sub-scope-box {
      border-left: 1px solid #555;
  }
  .boxtop:hover + .sub-scope-box > .small {
      font-weight: bold;
  }

  .scope-itself {
    font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  }

style.
  .method-properties > dt,
  .method-properties > dd {
    padding-top: 5px;
  }

  .schemabox .shortfield {
    width: 13ex;
  }

  .schemabox .short:hover {
    width: initial;
    white-space: normal;
    max-width: 40em;
    max-height: initial;
    border: 1px solid #444;
    margin-top: -1px;
    margin-left: -1px;
  }
  .schemabox .short {
    white-space: nowrap;
    width: 12ex;
    min-width: 12ex;
    overflow: hidden;
    text-overflow: ellipsis;
    display: inline-block;
    position: absolute;
  }

  .schemabox .normaltext {
    font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif;
  }

  .schemabox .lighter {
    color: #666;
  }

  .schemabox .enum {
    padding-left: 10px;
  }

  .schemabox .indent {
    padding-left: 2em;
  }

  .schemabox .indent table {
    border-left: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
  }

  .schemabox > table {
    font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  }

  .schemabox table .frow > td {
    border-bottom: 0;
  }

  .schemabox table .srow > td {
    border-top: 0;
  }

  .schemabox .required:after {
    content: '*';
    vertical-align: super;
    font-size: 0.7em;
    color: red;
    display: inline-block;
    position: absolute;
  }

  .schemabox .required:hover:after {
    content: 'required property';
    background: #fff;
    font-size: 0.8em;
  }

  .schemabox .schema-pattern {
    font-size: 0.7em !important;
  }

  .schemabox .date-time {
    color: green;
  }

  .schemabox .uri {
    color: blue;
  }

  .schemabox .email {
    color: purple;
  }

  .schemabox .ipv4, .schemabox .ipv6, .schemabox .hostname {
    color: orange;
  }

// /************ Title, meta-data and description ************/

h1 !{marked(title)}
hr

dl.dl-horizontal
  if typeof(baseUrl) != 'undefined'
    dt BaseUrl
    dd
      code= baseUrl

| !{marked(description)}

// /************ Functions Table ************/

//- Check if we have any function entries

if entries.some(function(entry) {return entry.type == 'function';})
  h3 Functions

  | For more information on invoking the API methods described here, see <a href="/manual/apis">Using the APIs</a> in the manual.

  table.table.table-bordered.table-responsive
    thead
      tr
        th Signature
        th Summary
    tbody
      each entry in entries.filter(function(entry) { return entry.type === 'function'; })
        - var args = entry.args.slice();
        if entry.input
          - args.push('payload');
        - var retval = 'void';
        if entry.output
          - retval = 'result';
        if entry.query
          - var query = entry.query.slice();
          if query.length > 0
            - var queryElements = "{" + query.join(", ") + "}";
            - args.push(queryElements);
        - var signature = entry.name + "(" + args.join(', ') + ") : " + retval;
        - var stabilityValue = entry.stability || "unknown";
        tr
          td
            code(class=stabilityValue)
              a(href=`#${entry.name}`, title=entry.title)= signature
          td= entry.title

// /************ Exchanges Table ************/

//- Check if we have any topic-exchanges entries
if entries.some(function(entry) {return entry.type == 'topic-exchange';})
  h3 Exchanges

  table.table.table-bordered.table-responsive
    thead
      tr
        th Name
        th Exchange
        th Summary
    tbody
      each entry in entries.filter(function(entry) { return entry.type === 'topic-exchange'; })
        - var exchange = exchangePrefix + entry.exchange;
        tr
          td
            a(href=`#${entry.name}`, title=entry.title)= entry.name
          td
            code
              a(href=`#${entry.name}`, title=entry.title)= exchange
          td= entry.title

// /************ Function Entries ************/

each entry in entries.filter(function(entry) { return entry.type === 'function'; })
  - var stabilityValue = entry.stability || "unknown";
  - var title = marked(entry.title);
  if entry.stability != "stable"
    - title = title + "(" + entry.stability + ")";
  a(name=entry.name)
  hr
  h2(class=stabilityValue) !{title}
  dl.dl-horizontal.method-properties
    dt Method
    dd
      .label.label-default= entry.method
    dt Route
    dd
      - var route = entry.route.replace(/[<]/g, '&lt;').replace(/[>]/g, '&gt;').replace(/&lt;/g, '<b>&lt;').replace(/&gt;/g, '&gt;</b>')
      code !{route}
    if entry.scopes
      dt Scopes
      if Array.isArray(entry.scopes)
        dd
          each scopeset, index in entry.scopes
            each scope, index in scopeset
              div.label.label-success !{scope.replace(/[<]/g, '&lt;').replace(/[>]/g, '&gt;')}
              if index != scopeset.length - 1
                <br />
            if index != entry.scopes.length - 1
              .strike
                span or
      else
        dd.scope-box
          +scopeBox(entry.scopes)
    dt Signature
    - var args = entry.args.slice();
    if entry.input
      - args.push('payload');
    - var retval = 'void';
    if entry.output
      - retval = 'result';
    if entry.query
      - var query = entry.query.slice();
      if query.length > 0
        - var queryElements = "{" + query.join(", ") + "}";
        - args.push(queryElements);
    - var signature = entry.name + "(" + args.join(', ') + ") : " + retval;
    dd
      code= signature
    <dt>Stability</dt>
    dd
      code(class=stabilityValue)= stabilityValue
  | !{marked(entry.description)}
  if entry.input
    h3 Request Payload
    +schemabox(entry.input)
  if entry.output
    h3 Response
    +schemabox(entry.output)
  br



// /************ Exchange Entries ************/

each entry in entries.filter(function(entry) { return entry.type === 'topic-exchange'; })
  a(name=entry.name)
  hr
  h2(class=stabilityValue) !{entry.name}
  dl.dl-horizontal.method-properties
    dt Exchange
    dd
      code= exchangePrefix + entry.exchange
    dt Signature
    dd
      code "#{entry.name}(routingKeyPattern)"
  | !{marked(entry.description)}
  h3 Routing Key
  table.table
    thead
      tr
        th Index
        th Name
        th Summary
        th
    tbody
      each key, index in entry.routingKey
        tr
          td
            .badge.badge-default= index
          td
            code= key.name
          td !{marked(key.summary)}
          td
            // TODO: Make these have tooltips
            if key.constant
              .label.label-default(
                data-toggle= "tooltip",
                data-placement= "left",
                title= `This key always assume the value \`${key.constant}\`. Used to allow additional routing key formats.`
              ) constant-key
              br
            if !key.required
              .label.label-info(
                data-toggle= "tooltip",
                data-placement= "left",
                title= "This key takes the value of `_`, if it does not make sense for the event reported."
              ) option-key
              br
            if key.multipleWords
              .label.label-danger(
                data-toggle= "tooltip",
                data-placement= "left",
                title= "This key may container dots `.`, creating multiple sub-keys, match it with `#`"
              ) multi-key
              br
  if entry.schema
    h3 Message Payload
    +schemabox(entry.schema)
  br
